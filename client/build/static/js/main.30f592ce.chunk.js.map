{"version":3,"sources":["components/Display.jsx","components/ProductForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","useState","products","setProducts","useEffect","axios","get","then","res","console","log","data","catch","err","map","p","i","className","key","title","price","description","createdAt","ProductForm","setTitle","setPrice","setDescription","errors","setErrors","onSubmit","e","preventDefault","newProduct","post","navigate","type","onChange","target","value","properties","message","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"sQAgCeA,EA7BC,SAAAC,GAAU,IAAD,EAEWC,mBAAS,IAFpB,mBAEdC,EAFc,KAEJC,EAFI,KAarB,OATAC,qBAAW,WACPC,IAAMC,IAAI,qCACLC,MAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZL,EAAYK,EAAIG,SAEnBC,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,QAC/B,IAGC,6BACKX,EAASY,KAAK,SAACC,EAAGC,GAAJ,OACX,yBAAKC,UAAU,YAAYC,IAAKF,GAC5B,yBAAKC,UAAU,qCAAqCF,EAAEI,OACtD,yBAAKF,UAAU,aACX,sCAAYF,EAAEK,OACd,2CAAiBL,EAAEM,aACnB,0CAAgBN,EAAEO,kB,OCyB3BC,EA7CK,SAAAvB,GAAU,IAAD,EAEAC,mBAAS,IAFT,mBAEnBkB,EAFmB,KAEZK,EAFY,OAGAvB,mBAAS,GAHT,mBAGnBmB,EAHmB,KAGZK,EAHY,OAIYxB,mBAAS,IAJrB,mBAInBoB,EAJmB,KAINK,EAJM,OAKEzB,mBAAS,IALX,mBAKnB0B,EALmB,KAKXC,EALW,KAsBzB,OACI,0BAAMC,SAhBK,SAAAC,GACXA,EAAEC,iBACF,IAAMC,EAAa,CAACb,QAAOC,QAAOC,eAElChB,IAAM4B,KAAK,wCAAyCD,GAC/CzB,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACTA,EAAIG,KAAKgB,OACRC,EAAUpB,EAAIG,KAAKgB,QAEnBO,YAAS,QAEdtB,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,OAINI,UAAU,6BAChC,yBAAKA,UAAU,cACX,wCACA,2BAAOkB,KAAK,OAAOlB,UAAU,eAAemB,SAAW,SAAAN,GAAC,OAAIN,EAASM,EAAEO,OAAOC,UAC7EX,EAAOR,MAAQ,uBAAGF,UAAU,eAAeU,EAAOR,MAAMoB,WAAWC,SAAc,IAEtF,yBAAKvB,UAAU,cACX,wCACA,2BAAOkB,KAAK,SAASlB,UAAU,eAAemB,SAAW,SAAAN,GAAC,OAAIL,EAASK,EAAEO,OAAOC,QAAQA,MAAOlB,IAC9FO,EAAOP,MAAQ,uBAAGH,UAAU,eAAeU,EAAOP,MAAMmB,WAAWC,SAAc,IAEtF,yBAAKvB,UAAU,cACX,8CACA,2BAAOkB,KAAK,OAAOlB,UAAU,eAAemB,SAAW,SAAAN,GAAC,OAAIJ,EAAeI,EAAEO,OAAOC,UACnFX,EAAON,YAAc,uBAAGJ,UAAU,eAAeU,EAAON,YAAYkB,WAAWC,SAAc,IAElG,2BAAOL,KAAK,SAASlB,UAAU,4BAA4BqB,MAAM,qBCtB9DG,MAdf,WACE,OACE,yBAAKxB,UAAU,kBACb,gDACA,kBAAC,IAAD,CAAMA,UAAU,4BAA4ByB,GAAG,KAA/C,iBACA,kBAAC,IAAD,CAAMzB,UAAU,uBAAuByB,GAAG,QAA1C,eACA,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAaC,KAAK,SAClB,kBAAC,EAAD,CAASA,KAAK,SCHFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd9C,OAAM,SAAA+C,GACLlD,QAAQkD,MAAMA,EAAMnB,c","file":"static/js/main.30f592ce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Display = props => {\n\n    const [products, setProducts] = useState([]);\n\n    useEffect( () => {\n        axios.get(\"http://localhost:8000/api/product\")\n            .then( res => {\n                console.log(res);\n                setProducts(res.data)\n            })\n            .catch(err => console.log(err));\n    }, []);\n\n    return (\n        <div>\n            {products.map( (p, i) => \n                <div className=\"card mt-3\" key={i}>\n                    <div className=\"card-header bg-primary text-white\">{p.title}</div>\n                    <div className=\"card-body\">\n                        <p>Price: ${p.price}</p>\n                        <p>Description: {p.description}</p>\n                        <p>Created At: {p.createdAt}</p>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Display;","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router'\n\nconst ProductForm = props => {\n\n    const[title, setTitle] = useState(\"\");\n    const[price, setPrice] = useState(0);\n    const[description, setDescription] = useState(\"\");\n    const[errors, setErrors] = useState({});\n\n    const create = e => {\n        e.preventDefault();\n        const newProduct = {title, price, description};\n\n        axios.post(\"http://localhost:8000/api/product/new\", newProduct)\n            .then(res => {\n                console.log(res);\n                if(res.data.errors) {\n                    setErrors(res.data.errors);\n                } else {\n                    navigate(\"/\");\n                }\n            }).catch(err => console.log(err));\n    }\n\n    return (\n        <form onSubmit={ create } className=\"col-sm-8 offset-sm-2 mt-5\">\n            <div className=\"form-group\">\n                <label>Title</label>\n                <input type=\"text\" className=\"form-control\" onChange={ e => setTitle(e.target.value)} />\n                {errors.title ? <p className=\"text-danger\">{errors.title.properties.message}</p>: \"\"}\n            </div>\n            <div className=\"form-group\">\n                <label>Price</label>\n                <input type=\"number\" className=\"form-control\" onChange={ e => setPrice(e.target.value)} value={price}/>\n                {errors.price ? <p className=\"text-danger\">{errors.price.properties.message}</p>: \"\"}\n            </div>\n            <div className=\"form-group\">\n                <label>Description</label>\n                <input type=\"text\" className=\"form-control\" onChange={ e => setDescription(e.target.value)} />\n                {errors.description ? <p className=\"text-danger\">{errors.description.properties.message}</p>: \"\"}\n            </div>\n            <input type=\"submit\" className=\"btn btn-primary btn-block\" value=\"Create Product\"/>\n        </form>\n    )\n\n}\n\nexport default ProductForm;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Display from \"./components/Display\";\nimport ProductForm from './components/ProductForm';\nimport { Link, Router } from '@reach/router';\n\nfunction App() {\n  return (\n    <div className=\"container mt-3\">\n      <h1>Products Manager</h1>\n      <Link className=\"btn btn-warning mt-2 mr-2\" to=\"/\">Products List</Link>\n      <Link className=\"btn btn-warning mt-2\" to=\"/new\">New Product</Link>\n      <Router>\n        <ProductForm path=\"/new\"/>\n        <Display path=\"/\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}